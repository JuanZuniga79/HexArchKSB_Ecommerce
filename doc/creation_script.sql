CREATE TABLE IF NOT EXISTS ROLES(
    id SERIAL PRIMARY KEY,
    name VARCHAR(32) UNIQUE NOT NULL,
    description VARCHAR(512) DEFAULT 'no description'
);

CREATE TABLE IF NOT EXISTS DOCUMENT_TYPES(
  id SERIAL PRIMARY KEY,
  name VARCHAR(64) NOT NULL UNIQUE,
  code VARCHAR(4) NOT NULL UNIQUE
);

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE IF NOT EXISTS USERS(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    first_name VARCHAR(128) NOT NULL,
    last_name VARCHAR(128) NOT NULL,
    email VARCHAR(256) NOT NULL UNIQUE,
    username VARCHAR(32) NOT NULL UNIQUE,
    password VARCHAR(128) NOT NULL,
    document VARCHAR(16) NOT NULL UNIQUE,
    active BOOLEAN NOT NULL DEFAULT true,
    role_id INTEGER NOT NULL REFERENCES ROLES(id) ON DELETE RESTRICT,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_by UUID REFERENCES USERS(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS SUBSCRIPTION_STATUSES(
    id SERIAL PRIMARY KEY,
    name VARCHAR(128) NOT NULL UNIQUE,
    code VARCHAR(4) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS SUBSCRIPTION_TYPES(
    id SERIAL PRIMARY KEY,
    name VARCHAR(64) NOT NULL UNIQUE,
    level INTEGER check ( level < 6 and level > 0 ) NOT NULL UNIQUE,
    description VARCHAR(512)
);

CREATE TABLE IF NOT EXISTS PAYMENT_TYPES(
    id SERIAL PRIMARY KEY,
    name VARCHAR(32) NOT NULL UNIQUE,
    code VARCHAR(5) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS PAYMENT_METHOD_OWNERS(
    id BIGSERIAL PRIMARY KEY,
    first_name VARCHAR(128) NOT NULL,
    last_name VARCHAR(128) NOT NULL,
    document VARCHAR(16) NOT NULL UNIQUE,
    document_type_id INTEGER NOT NULL REFERENCES DOCUMENT_TYPES(id) ON DELETE RESTRICT,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_by UUID NOT NULL REFERENCES USERS(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_METHODS(
    id BIGSERIAL PRIMARY KEY,
    number VARCHAR(16) NOT NULL,
    cvv VARCHAR(8) NOT NULL,
    expiration_month INTEGER NOT NULL CHECK ( expiration_month >= 1 and expiration_month <= 12 ),
    expiration_year INTEGER NOT NULL CHECK ( expiration_year >= EXTRACT(YEAR FROM CURRENT_DATE) ),
    payment_type_id INTEGER NOT NULL REFERENCES PAYMENT_TYPES(id) ON DELETE RESTRICT,
    method_owner_id INTEGER NOT NULL REFERENCES PAYMENT_METHOD_OWNERS(id) ON DELETE RESTRICT,
    owner_id UUID NOT NULL REFERENCES USERS(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_by UUID NOT NULL REFERENCES USERS(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS SUBSCRIPTIONS(
    id BIGSERIAL PRIMARY KEY,
    start_date DATE NOT NULL DEFAULT CURRENT_DATE,
    end_date DATE NOT NULL DEFAULT (CURRENT_DATE + INTERVAL '1 month')::DATE,
    owner_id UUID NOT NULL REFERENCES USERS(id) ON DELETE CASCADE,
    subscription_type_id INTEGER NOT NULL REFERENCES SUBSCRIPTION_TYPES(id) ON DELETE RESTRICT,
    subscription_status_id INTEGER NOT NULL REFERENCES SUBSCRIPTION_STATUSES(id) ON DELETE RESTRICT,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_by UUID NOT NULL REFERENCES USERS(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS COUNTRIES(
    id SERIAL PRIMARY KEY,
    code INTEGER NOT NULL UNIQUE,
    name VARCHAR(64) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS CITIES(
    id         BIGSERIAL PRIMARY KEY,
    name       VARCHAR(128) NOT NULL,
    country_id INTEGER      NOT NULL REFERENCES COUNTRIES (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PHONES(
    id BIGSERIAL PRIMARY KEY,
    number VARCHAR(16) NOT NULL UNIQUE,
    whatsapp BOOLEAN NOT NULL DEFAULT FALSE,
    country_id INTEGER NOT NULL REFERENCES COUNTRIES(id) ON DELETE RESTRICT,
    owner_id UUID NOT NULL REFERENCES USERS(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS LOCATIONS(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    address VARCHAR(128) NOT NULL,
    city_id BIGINT NOT NULL REFERENCES CITIES(id) ON DELETE RESTRICT,
    owner_id UUID NOT NULL REFERENCES USERS(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PRIORITIES(
    id SERIAL PRIMARY KEY,
    name VARCHAR(32) NOT NULL UNIQUE,
    value INTEGER NOT NULL CHECK ( value > 0 ) UNIQUE
);

CREATE TABLE IF NOT EXISTS CATEGORIES(
    id SERIAL PRIMARY KEY,
    name VARCHAR(128) NOT NULL UNIQUE,
    code VARCHAR(4) NOT NULL UNIQUE,
    description VARCHAR(512),
    metadata VARCHAR(512) NOT NULL DEFAULT 'do not have metadata'
);

CREATE TABLE IF NOT EXISTS SUBCATEGORIES(
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(128) NOT NULL UNIQUE,
    code VARCHAR(4) NOT NULL UNIQUE,
    description VARCHAR(512),
    metadata VARCHAR(512) NOT NULL DEFAULT 'do not have metadata',
    category_id INTEGER NOT NULL REFERENCES CATEGORIES(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PRODUCTS(
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(256) NOT NULL UNIQUE,
    code VARCHAR(6) NOT NULL UNIQUE,
    price DECIMAL(10, 2) NOT NULL DEFAULT 0,
    metadata VARCHAR(1024) NOT NULL DEFAULT 'do not have metadata',
    content TEXT NOT NULL DEFAULT 'do not have content',
    amount INTEGER NOT NULL DEFAULT 0,
    discount DECIMAL(9,2) NOT NULL DEFAULT 0,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    priority_id INTEGER NOT NULL REFERENCES PRIORITIES(id) ON DELETE RESTRICT,
    seller_id UUID NOT NULL REFERENCES USERS(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_by UUID NOT NULL REFERENCES USERS(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS SUBCATEGORY_PRODUCTS(
    id BIGSERIAL PRIMARY KEY,
    product_id BIGINT NOT NULL REFERENCES PRODUCTS(id) ON DELETE CASCADE,
    subcategory_id BIGINT NOT NULL REFERENCES PRODUCTS(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS DISCOUNT_TYPES(
    id SERIAL PRIMARY KEY,
    name VARCHAR(64) NOT NULL,
    code VARCHAR(4) NOT NULL UNIQUE,
    description VARCHAR(256)
);

CREATE TABLE IF NOT EXISTS DISCOUNT_CODES(
    id SERIAL PRIMARY KEY,
    code VARCHAR(12) NOT NULL UNIQUE,
    value DECIMAL(9,2) NOT NULL DEFAULT 0,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    description VARCHAR(128), active_until DATE NOT NULL,
    discount_type_id INTEGER NOT NULL REFERENCES DISCOUNT_TYPES(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_by UUID NOT NULL REFERENCES USERS(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS PRODUCTS_DISCOUNT_CODES(
    id BIGSERIAL PRIMARY KEY,
    product_id BIGINT NOT NULL REFERENCES PRODUCTS(id) ON DELETE CASCADE,
    discount_code_id INTEGER NOT NULL REFERENCES DISCOUNT_CODES(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SHOPPING_CARTS(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_by UUID NOT NULL REFERENCES USERS(id) ON DELETE CASCADE,
    owner_id UUID NOT NULL REFERENCES USERS(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SHOPPING_CART_PRODUCTS(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_by UUID NOT NULL REFERENCES USERS(id) ON DELETE CASCADE,
    amount INTEGER NOT NULL CHECK ( amount > 0 ),
    product_id BIGINT NOT NULL REFERENCES PRODUCTS(id) ON DELETE CASCADE,
    shopping_cart_id UUID NOT NULL REFERENCES SHOPPING_CARTS(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PURCHASE_STATUSES(
    id SERIAL PRIMARY KEY,
    name VARCHAR(32) NOT NULL UNIQUE,
    code VARCHAR(4) NOT NULL UNIQUE,
    description VARCHAR(512)
);

CREATE TABLE IF NOT EXISTS PURCHASES(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    total_price DECIMAL(13,2) NOT NULL CHECK ( total_price > 0 ),
    shopping_cart_id UUID NOT NULL REFERENCES SHOPPING_CARTS(id) ON DELETE RESTRICT,
    delivery_address_id UUID NOT NULL REFERENCES LOCATIONS(id) ON DELETE SET NULL,
    payment_method_id BIGINT NOT NULL REFERENCES PAYMENT_METHODS(id) ON DELETE SET NULL,
    purchase_status_id INTEGER NOT NULL REFERENCES PURCHASE_STATUSES(id) ON DELETE RESTRICT,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_by UUID NOT NULL REFERENCES USERS(id) ON DELETE RESTRICT
);

--- Functions

CREATE OR REPLACE FUNCTION enforce_audit_fields()
    RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'UPDATE' THEN
        IF NEW.updated_by IS NULL THEN
            RAISE EXCEPTION 'Missing updater_id on update for table "%"', TG_TABLE_NAME;
        END IF;
        NEW.updated_at = NOW();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


--- Triggers

DO $$
    DECLARE
        tbl TEXT;
    BEGIN
        FOR tbl IN
            SELECT table_name
            FROM information_schema.columns
            WHERE column_name = 'updated_at'
              AND table_schema = 'public'
            LOOP
                EXECUTE format(
                        'DROP TRIGGER IF EXISTS trigger_audit_%I ON %I;',
                        tbl, tbl
                        );

                EXECUTE format(
                        'CREATE TRIGGER trigger_audit_%I
                         BEFORE UPDATE ON %I
                         FOR EACH ROW
                         EXECUTE FUNCTION enforce_audit_fields();',
                        tbl, tbl
                        );
            END LOOP;
    END
$$;
